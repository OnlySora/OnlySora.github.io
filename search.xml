<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>云计算的概述</title>
    <url>/aticles/5f15c9ec/</url>
    <content><![CDATA[<p><strong>云计算</strong></p>
<blockquote>
<p>是服务器的一种交互模式</p>
</blockquote>
<p>发展基础：并行计算，分布式计算，网格计算<br>层次图：<br><img src="0.jpg" alt="云计算结构层次图"></p>
<p><strong>云服务</strong><br>类型：Sass，Paas，Iaas<br>核心：虚拟化将虚拟机和硬件之间形成多对多的关系<br>基本安全数据存储：电源可持续，备份机制，数据安全<br>云构架（横向）：显示层（HTML）、中间层（REST，并行）、基础设施层（虚拟化）<br>云构架（纵向）：管理层<br>云部署的方式：私有云，公有云（即付即用），混合云（私公结合）<br>三种服务的基本功能<br>| Iaas | Paas | Saas |<br>|–|–|–|<br>| 资源抽象 | 开发环境  | 随时随地访问 |<br>| 资源监控 | 自动的资源调度 | 支持公开协议 |<br>| 负载管理 | 管理和监控 | 安全保障 |<br>| 数据管理 | 丰富的服务 | 多用户机制 |<br>| 资源部署 |  |  |<br>| 安全管理 |  |  |<br>| 计费管理 |  |  | </p>
<hr>
<p><strong>云存储</strong><br>结构：应用接口层，基础管理层（核心），存储层<br>关键技术：并行计算，虚拟化，数据分布存储（M/S节点），信息安全<br>基础管理层存储技术：分布式文件分布系统，系统技术，网络技术，集群技术<br>存储层连接方式：直连，基于TCP/IP协议的以以太网为基础的服务，基于SAN网路<br>目前已有的数据分布式存储的架构实现：谷歌的GFS，hadoop的HDFS</p>
<blockquote>
<p>两者区别：前者有快照，延迟删除，后者没有</p>
</blockquote>
<p>客户端读取文件过程：客户端发文件请求给M服务器，获得M服务器响应的S节点位置，然后请求这个位置给这个S节点即可获取想要的数据<br>客户端写入过程：客户端发出请求到M，然后获取其响应的S节点位置，然后发送请求到S节点，S节点会拉上额外的几个节点作为备份节点（一般是一个主节点，两个备份）<br>数据存储的结构：结构化存储（MySQL），非结构化存储，半结构化存储（NoSQL）</p>
<blockquote>
<p>NoSQL层次： 接口层，数据逻辑模型层，数据分布层，数据持久层</p>
</blockquote>
<p>难题：数据划分，数据一致性，数据容灾</p>
<hr>
<p><strong>虚拟化</strong></p>
<blockquote>
<p>讲实体抽象化为逻辑</p>
</blockquote>
<p>技术：</p>
]]></content>
      <categories>
        <category>云技术</category>
      </categories>
      <tags>
        <tag>云存储</tag>
        <tag>云服务</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/aticles/ff8068c0/</url>
    <content><![CDATA[<p><strong>快速排序是对冒泡排序的一种改进</strong></p>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>1.将要排序的数组设定指向下标为0的low指针和下标为（数组长度-1）的high指针<br>2.将下low指向旳值设为对比值<br>3.先从high开始与对比值对比，直到遇到比对比值小的然后将值覆盖low指向的值<br>4.low向右移动一位开始与对比值对比，直到遇到比对比值大的然后将值覆盖high指向的值，然后high向左移动一位<br>5.重复2,3，直到low和high相遇<br>6.此时将low指向的值设为中间值，两旁的数组递归执行涉及到的全部步骤。</p>
<h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><p><strong>O(nlogn)</strong></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><img src="0.jpg" alt="快速排序示意图"></p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Partition</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.arr = arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">Partion</span><span class="params">(<span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = arr[low];</span><br><span class="line">        <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">            <span class="keyword">while</span>(low &lt; high &amp;&amp; arr[high] &gt;= a)</span><br><span class="line">                high --;</span><br><span class="line">            arr[low] = arr[high];</span><br><span class="line">            <span class="keyword">while</span>(low &lt; high &amp;&amp; arr[low] &lt;= a)</span><br><span class="line">                low ++;</span><br><span class="line">            arr[high] = arr[low];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[low] = a;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">QSort</span><span class="params">(<span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(low &lt; high)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = Partion(low, high);</span><br><span class="line">            QSort(low, mid - <span class="number">1</span>);</span><br><span class="line">            QSort(mid + <span class="number">1</span>, high);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">QSort</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.length == <span class="number">0</span> || arr == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        QSort(<span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>最长的回文子串</title>
    <url>/aticles/e30715ac/</url>
    <content><![CDATA[<p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。<br>示例 1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;babad&quot;</span><br><span class="line">输出: &quot;bab&quot;</span><br><span class="line">注意: &quot;aba&quot; 也是一个有效答案。</span><br></pre></td></tr></table></figure>
<p>该题可用动态规划，中心扩展，Manacher来解决</p>
<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p><strong>思路</strong><br>右指针从第二位开始，左指针在右指针的位置前面进行顺序检测是否存在回文子串，检测到满足条件就在对应的数组标记为true，若满足条件的子串长度比目前的最长长度长，就更新最长长度变量和最长的回文子串，左指针每遍历完一次，右指针就向右移动一次。<br><strong>思想</strong><br>对每个子问题（及子问题的子问题）只求解一次，将其解保存在一个表格中，从而在计算大规模的问题的时候，小规模的问题已经计算过，从而避免了不必要的计算工作。</p>
<p><strong>复杂度</strong><br>初始化二维数组时就已经把时间复杂度变成了O(n^2^)了（虽然这个算法本身复杂度就是O(n^2^)），我纳闷的是为什么java二维数组初始化时不能同时给每个值设置默认值呢，问题求解了好久也不知道该怎么设置默认值，根据我记得的基础，这是二维数组，二维数组里的对象初始化都是null，只能双重循环加入数字就很难受了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">if</span>(len &lt;= <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">        String maxStr = s.substring(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        Boolean[][] dp = <span class="keyword">new</span> Boolean[len][len];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j ++)</span><br><span class="line">                dp[i][j] = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> maxlen = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> r = <span class="number">1</span>; r &lt; len; r ++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; r; l ++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(l)==s.charAt(r) &amp;&amp; (r-l&lt;=<span class="number">2</span> || dp[l+<span class="number">1</span>][r-<span class="number">1</span>]))&#123;</span><br><span class="line">                    dp[l][r]=<span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">if</span>(r-l+<span class="number">1</span> &gt; maxlen)&#123;</span><br><span class="line">                        maxlen = r-l+<span class="number">1</span>;</span><br><span class="line">                        maxStr = s.substring(l, r+<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxStr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="中心扩展（待更）"><a href="#中心扩展（待更）" class="headerlink" title="中心扩展（待更）"></a>中心扩展（待更）</h2>]]></content>
      <categories>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>数组的全部子集问题</title>
    <url>/aticles/696ca8/</url>
    <content><![CDATA[<p>例题：有数组[1, 2, 3]，其元素数量n = 3，将那么其子集为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [1],</span><br><span class="line">  [2],</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>可以用一共三个方法来求出所有子集，以这题作为参考</p>
<h1 id="使用二叉树来构建含有子集的叶子节点，然后使用中序遍历"><a href="#使用二叉树来构建含有子集的叶子节点，然后使用中序遍历" class="headerlink" title="使用二叉树来构建含有子集的叶子节点，然后使用中序遍历"></a>使用二叉树来构建含有子集的叶子节点，然后使用中序遍历</h1><p><b>思路</b><br>每一层代表一个元素，左子树代表不使用该节点，右子树代表使用该节点，使用中序遍历来获得全部叶子结点，那么就能获得该数组的子集。</p>
<p><b>思路图</b><br><img src="0.jpg" alt="思路图"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getArr</span><span class="params">(List&lt;Integer&gt; list, List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; temp, <span class="keyword">int</span> level)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(level == list.size())</span><br><span class="line">        &#123;</span><br><span class="line">            result.add(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            getArr(list, result, <span class="keyword">new</span> ArrayList&lt;&gt;(temp), level + <span class="number">1</span>);</span><br><span class="line">            temp.add(list.get(level));</span><br><span class="line">            getArr(list, result, <span class="keyword">new</span> ArrayList&lt;&gt;(temp), level + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="使用本质递归法递归遍历"><a href="#使用本质递归法递归遍历" class="headerlink" title="使用本质递归法递归遍历"></a>使用本质递归法递归遍历</h1><p><b>思路</b><br>因为这个可以划分出比原问题规模小却同质的问题，那么是可以用递归解决的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;List&lt;Integer&gt;&gt; getArr(List&lt;Integer&gt; list, List&lt;List&lt;Integer&gt;&gt; result, <span class="keyword">int</span> index)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(index == list.size())</span><br><span class="line">        &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;(getArr(list, result, index + <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">for</span>(List&lt;Integer&gt; eList : arr)</span><br><span class="line">            &#123;</span><br><span class="line">                List&lt;Integer&gt; temp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(eList);</span><br><span class="line">                temp.add(list.get(index));</span><br><span class="line">                <span class="comment">//给子集的每个数组从小到大排序</span></span><br><span class="line">                temp.sort(Comparator.comparing(Integer::intValue));</span><br><span class="line">                result.add(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="使用二进制组合遍历"><a href="#使用二进制组合遍历" class="headerlink" title="使用二进制组合遍历"></a>使用二进制组合遍历</h1><p><b>思路</b><br>这个最简单，这题有3个元素，假设这三个元素设为连续的二进制数，1代表选取，0代表不选取，从000 - 111一共有八种情况，也是子集的数量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getArr</span><span class="params">(List&lt;Integer&gt; list, List&lt;List&lt;Integer&gt;&gt; result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//子集的数量</span></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">1</span> &lt;&lt; list.size();</span><br><span class="line">    List&lt;Integer&gt; temp = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line">        <span class="keyword">int</span> index = list.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//循环前检测j是否是000</span></span><br><span class="line">        <span class="keyword">while</span>(j &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((j&amp;<span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                temp.add(list.get(index));</span><br><span class="line">            &#125;</span><br><span class="line">            j = j &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            index --;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.sort(Comparator.comparing(Integer::intValue));</span><br><span class="line">        result.add(temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
</search>
